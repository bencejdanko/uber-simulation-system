services:
  kong:
      # --- Build the custom image instead of pulling ---
      build:
        context: ./kong  # Directory containing the Dockerfile and plugin source
        dockerfile: kong.Dockerfile # The name of the Dockerfile within the context
      # image: kong/kong-gateway:latest # Remove this line
      # --- End Build Section ---

      container_name: kong-gateway
      environment:
        KONG_DATABASE: 'off'
        KONG_DECLARATIVE_CONFIG: /etc/kong/kong.yaml
        KONG_PROXY_LISTEN: 0.0.0.0:8000
        KONG_ADMIN_LISTEN: 0.0.0.0:8001
        KONG_LOG_LEVEL: debug # Keep for debugging plugin
        KONG_DECLARATIVE_CONFIG_SCHEMA_CACHE: 'off'

        # --- REMOVE THESE ---
        # KONG_PLUGINS: bundled,jwt,jwt-claims-to-headers # Now set in the Dockerfile ENV
        # KONG_LUA_PACKAGE_PATH: /usr/local/kong/plugins/?.lua;; # Not needed if using standard path
        # --- End Removals ---

        # KONG_DNS_ORDER: LAST,SRV,A,CNAME # Uncomment if needed

      ports:
        - "${GATEWAY_PORT:-80}:8000" # Use default 80 if GATEWAY_PORT not set
        - "${GATEWAY_ADMIN_PORT:-8001}:8001" # Use default 8001 if GATEWAY_ADMIN_PORT not set
      volumes:
        # Mount the configuration file ONLY
        - ./kong/config/kong.yaml:/etc/kong/kong.yaml:ro
      healthcheck:
        test: ["CMD", "kong", "health"]
        interval: 10s
        timeout: 5s
        retries: 5
        start_period: 15s # Give time for config load, especially first time

  broker:
    # --- BROKER CONFIGURATION UNCHANGED AS REQUESTED ---
    image: apache/kafka:latest
    hostname: broker
    container_name: uber-broker
    ports:
      - "9092:9092" # Exposes PLAINTEXT_HOST listener
      # The internal ports 29092 and 29093 don't strictly need to be exposed
      # to the host machine unless you have external tools *on the host*
      # that need to connect directly to these internal listeners.
      # Keeping them for explicitness based on original file.
      - "29092:29092"
      - "29093:29093"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT,CONTROLLER:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_NODE_ID: 1
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@broker:29093
      KAFKA_LISTENERS: PLAINTEXT://broker:29092,CONTROLLER://broker:29093,PLAINTEXT_HOST://0.0.0.0:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_LOG_DIRS: /tmp/kraft-combined-logs
      CLUSTER_ID: MkU3OEVBNTcwNTJENDM2Qk # Ensure this is unique if running multiple clusters
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "false" # Explicitly disable, let broker-init handle it
    healthcheck:
      # CORRECTED: Use full path to the script and port 9092
      test: ["CMD-SHELL", "/opt/kafka/bin/kafka-topics.sh --bootstrap-server localhost:9092 --list > /dev/null || exit 1"]
      interval: 15s
      timeout: 15s       # Keep slightly increased timeout
      retries: 10
      start_period: 60s  # Keep increased start period

  broker-init:
    image: apache/kafka:latest
    container_name: uber-broker-init
    depends_on:
      broker:
        condition: service_healthy # Wait for broker's healthcheck to pass
    volumes:
      - ./broker-init.sh:/opt/kafka/broker-init.sh:ro
    # Set the entrypoint to execute the mounted script
    entrypoint: ["/bin/sh", "/opt/kafka/broker-init.sh"]
    # command: is not needed when entrypoint is the script
    environment:
      KAFKA_CREATE_TOPICS: "user-registered:1:1"
    # Kompose label to indicate this is a one-off init container
    restart: "no"

  # --- Auth Service ---
  auth-service:
    build:
      context: ./services/auth # Path relative to docker-compose.yml
      dockerfile: Dockerfile
    # No need to expose the auth service port unless you want to access it directly
    # ports:
    #   - "3000:3000" # Map container port 3000 to host port 3000
    environment:
      # Server configuration
      - PORT=3000
      
      # MongoDB configuration
      - MONGODB_URI=${MONGODB_URI}
      
      # JWT configuration
      - ACCESS_TOKEN_PRIVATE_KEY_PATH=/usr/src/app/private.pem
      - ACCESS_TOKEN_PUBLIC_KEY_PATH=/usr/src/app/public.pem
      - ACCESS_TOKEN_LIFE=15m
      - ACCESS_TOKEN_KID=auth-service-key-1
      - JWT_ISSUER=https://my-auth-service.com
      
      # Kafka configuration
      - KAFKA_BROKERS=broker:29092,broker:29093,broker:9092
      - KAFKA_CLIENT_ID=auth-service-producer
      - KAFKA_USER_REGISTERED_TOPIC=user.registered
      
      # Hashing configuration
      - BCRYPT_SALT_ROUNDS=10
    
    volumes:
      # Mount the key files
      - ./keys/private.pem:/usr/src/app/private.pem:ro
      - ./keys/public.pem:/usr/src/app/public.pem:ro
    
    depends_on:
      mongo:
        condition: service_healthy
      redis:
        condition: service_healthy
      broker-init: # Depend on the init container completing successfully
        condition: service_completed_successfully

  # --- Billing Service ---
  billing-service:
    build:
      context: ./services/billing # Path relative to docker-compose.yml
      dockerfile: Dockerfile
    # No need to expose the billing service port unless you want to access it directly
    # ports:
    #   - "3002:3002" # Map container port 3002 to host port 3002
    environment:
      - PORT=3000
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      
    depends_on:
      mongo:
        condition: service_healthy
      redis:
        condition: service_healthy
      broker-init: # Depend on the init container completing successfully
        condition: service_completed_successfully

  # --- Driver Service ---
  driver-service:
    build:
      context: ./services/driver # Path relative to docker-compose.yml
      dockerfile: Dockerfile
    # No need to expose the driver service port unless you want to access it directly
    # ports:
    #   - "3001:3001" # Map container port 3001 to host port 3001
    environment:
      - PORT=3001
      - KAFKA_BROKERS=broker:29092,broker:29093,broker:9092
      - KAFKA_CLIENT_ID=driver-service-consumer
      - KAFKA_USER_REGISTERED_TOPIC=user.registered
      - MONGODB_URI=${MONGODB_URI}
      
    depends_on:
      mongo:
        condition: service_healthy
      redis:
        condition: service_healthy
      broker-init: # Depend on the init container completing successfully
        condition: service_completed_successfully

  redis:
    image: redis:7.2-alpine
    container_name: redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 20s

  mongo:
    image: mongo:6.0
    container_name: uber-mongodb
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 20s

volumes:
  mongodb_data:
    driver: local
  redis_data:
    driver: local